#!/usr/bin/wish
#
#
#

#####################################################################################
# Images
#####################################################################################

image create photo mixers -data {
R0lGODlhvAH0AeflAAMEAwACLBQBAAACMwACPAcGBhsBAAMGFgEHJgAERyMBAAAGVwsLCwILNhcL
BCkGAQAJZzYHABAREBQUFAMRbQ0XLwgWUUcOAwIXdxoaGikXEDgVBAsVjAIZiCEcIAMbl0gXAwUc
qxYmMVYaAy4lGgYlmCcnJ2UaBQcmpwgptw4skVYlCR4tYy4uMAgs2Acp+hAszAIt9Act6QIt/mgo
CC00Sjg0KxQs5xIysgot/hMr/Ak1yAI07AEz/gI09Eg0Kgc22Qc15jk4Ngoz/ic2kCAx1xU2yHAu
Dgo19xU11yY1rwE67BU15pgkDxM0+gE69AE6/kU6QkQ8NostA5QtATtCO5osCXk2CZQtE5wtAaUq
B6MtAUZDPIw0AwlD83k4F6otADdHUow1C5Q0ApQ0C5szAYg4CnQ7KJszCqIyAYg4FSVIoaswCo06
Ag1YVqoyAUlIRZM5ApU3FIk7I1RJOHhCFpc6C6M3Bps6AjBLsG9GL1RNR0xPVY1DEyRaaAhmWwNn
ZjBP0CFT3U5TbFdUSwVqbS9S72ZVS1pZVpBNLmNdVl9gX1Zfn1dlbmZjWqhUMGZlZFJotmxqZE9p
0WxsbKxfMnVsWnNtZ2xwc1tq4k5t7XNzcjGFg5ZsUnZza6JoV8ZhNXF2iZFwaKpsUHp5dIR5aXx8
e4N8dnWEeYd8lIeEenyHj8V3WYeGhGCTmpKJd3OM1YyMjJOMhouPk7OIb7aLYZOTk3WT9piUimuX
8ZOYqJqamYiX9sySc4yc1KmbjtyVa8mYh5ujo6ikmaiop7GolJKt+q6vr9Csk7e0qrS0tLG3yLm4
tqm3+cm4rru7u+u0nrfDusa91MbDu6jH/sbGxNXIt7HP3rfK/svMy7XS+9DPzfLKs8/S88fY/u7W
zfror/L4+/j4+Pv58v7+/v//////////////////////////////////////////////////////
/////////////////////////////////////////////////////yH+EUNyZWF0ZWQgd2l0aCBH
SU1QACH5BAEKAP8ALAAAAAC8AfQBAAj+ALP9G0iwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mix
o8ePIEOKHEmypMmTKFOqXMmypcuXMGPKnEkTpawfCgToVPBDVs2fQIMKHUo0JjEDBiKM+FLnC4gI
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
}

#####################################################################################
# Global Variables
#####################################################################################

set baud 115200
set baudrates "9600 38400 57600 115200"
set tabname(pid) "PID"
set tabname(rc) "RC"
set tabname(vbat) "VBAT"
set tabname(pitchrollyaw) "Pitch/Roll/Yaw"
set tabname(align) "Align"
set tabname(accgyromag) "Acc/Gyro/Mag"
set tabname(gps) "GPS"
set tabname(alt) "Baro/Sonar"
set tabname(nav) "Navigation"
set tabname(gimbal) "Gimbal"
set tabname(wing) "Wing"
set tabname(tri) "Tricopter"
set tabname(led) "LED"
set tabname(etc) "ETC"
set comports ""
set Serial 0
set buffer ""
set channels ""
set mixer_set ""
set mixer_list ""
set feature_enabled ""
set feature_list ""
set FlashSerial 0
set FlashTimeout 0
set OnlineHelp 1
set HELPTEXT(loaded) 0


#####################################################################################
# GUI-Functions
#####################################################################################

proc launchBrowser url {
	global tcl_platform
	switch $tcl_platform(os) {
		Darwin {
		  set command [list open $url]
		}
		HP-UX -
		Linux  -
		SunOS {
		  foreach executable {firefox mozilla netscape iexplorer opera lynx w3m links epiphany galeon konqueror mosaic amaya browsex elinks} {
		    set executable [auto_execok $executable]
		    if [string length $executable] {
		      set command [list $executable $url &]
		      set command [list $executable $url]
		      break
		    }
		  }
		}
		{Windows 95} -
		{Windows NT} {
		  set command "[auto_execok start] {} [list $url]"
		}
	}
	if [info exists command] {
		if [catch {exec {*}$command &} err] {
		  tk_messageBox -icon error -message "error '$err' with '$command'"
		}
	} else {
		tk_messageBox -icon error -message "Please tell CL that ($tcl_platform(os), $tcl_platform(platform)) is not yet ready for browsing."
	}
}

proc show_help_about {} {
	global docu1
	catch {destroy .help}
	toplevel .help
	wm title .help "About"
	frame .help.f -highlightthickness 1 -borderwidth 1 -relief sunken
	pack .help.f -expand yes -fill both
	text .help.f.t -yscrollcommand ".help.f.scroll set" -setgrid true -width 80 -height 20 -wrap word -highlightthickness 0 -borderwidth 0
	pack .help.f.t -side left -expand  yes -fill both
	scrollbar .help.f.scroll -command ".help.f.t yview"
	pack .help.f.scroll -side right -fill y
	.help.f.t tag configure header -font "times 24 bold" -justify center
	.help.f.t tag configure center -justify center -spacing1 10p -spacing2 2p -lmargin1 12m -lmargin2 6m -rmargin 10m
	.help.f.t tag configure text -spacing1 10p -spacing2 2p -lmargin1 12m -lmargin2 6m -rmargin 10m
	.help.f.t insert end "\n" text
	.help.f.t insert end "GUI: By Oliver Dippel\n" center
	.help.f.t insert end "All rights reserved\n" center

	button .help.exit -text "Exit" -width 14 -command {
		destroy .help
	}
	pack .help.exit -side bottom -expand no -fill x
}

proc disable_all {path} {
    catch {$path configure -state disabled}
    foreach child [winfo children $path] {
        disable_all $child
    }
}

proc enable_all {path} {
    catch {$path configure -state normal}
    foreach child [winfo children $path] {
        enable_all $child
    }
}

#####################################################################################
# Flash-Functions
#####################################################################################

proc FirmwarefileDialog {w file} {
	global Serial
	global FlashSerial
	global FlashTimeout
	set types {
		{"HEX files"		{.hex}	}
		{"BIN files"		{.bin}	}
		{"Text files"		{}		TEXT}
		{"All files"		*}
	}
	if {$file == "file"} {
		global selected_type
		if {![info exists selected_type]} {
			set selected_type "Tcl Scripts"
		}
		set file [tk_getOpenFile -filetypes $types -parent $w -typevariable selected_type]
		puts "$file"
	}
	if {$file != ""} {
		.info configure -text "flashfile: $file"
		.info configure -background red
		update
		after 500
		if {$Serial != 0} {
			serial_send $Serial "exit"
			after 2000
			puts -nonewline $Serial "R"
			flush $Serial
			after 2000
			catch {fileevent $Serial readable ""}
			catch {close $Serial}
			FlashFirmwareFile "$file"
			.info configure -background lightgray
			update
			after 2000
			connect_serial
		} else {
			FlashFirmwareFile "$file"
			if {$FlashTimeout != 0} {
				.info configure -background lightgray
				.info configure -text "Try to connect first"
				update
				return
			}
			.info configure -background lightgray
			update
		}
	}
}

proc FlashSerial_Init {ComPort ComRate} {
	global FlashSerial
	catch {close $FlashSerial}
#	catch {fileevent $FlashSerial readable ""}
	set iChannel 0
	if {[catch {
		set iChannel [open $ComPort w+]
		fconfigure $iChannel -mode $ComRate,n,8,2 -translation binary -ttycontrol {RTS 1 DTR 0} -blocking FALSE
#		fileevent $iChannel readable [list rd_chid $iChannel]
		.info configure -text "FlashSerial-OK: $ComPort @ $ComRate"
		update
	}]} {
		.info configure -text "FlashSerial-Error: $ComPort @ $ComRate"
		update
	}
	return $iChannel
}

proc FlashSerial_Close {} {
	global FlashSerial
	catch {close $FlashSerial}
}

proc FlashWait_reply {} {
	global FlashSerial
	global FlashTimeout
	set num 0
	set ch [read $FlashSerial 1]
	binary scan $ch c num
	set counter 0
	while {$num == 0 && $counter < 100} {
		set ch [read $FlashSerial 1]
		binary scan $ch c num
		after 10
		incr counter
	}
	if {$counter >= 100} {
		.info configure -text "#### timeout ####"
		set FlashTimeout 1
		update
		after 1000
		return
	}
	binary scan $ch c num
	set ret "[format 0x%x $num]"
#	puts "< $ret"
	if {$ret == "0x79"} {
#		puts "ACK"
	} elseif {$ret == "0x1f"} {
		.info configure -text "NACK"
		update
		after 1000
	} else {
		.info configure -text "Unknown: $ret"
		update
	}
}

proc FlashInitChip {} {
	global FlashSerial
	.info configure -text "send init"
	update
	puts -nonewline $FlashSerial "[binary format c 0x7F]"
	flush $FlashSerial
	FlashWait_reply
}

proc FlashCmdGeneric {CMD} {
	global FlashSerial
	set CSUM [format 0x%x [expr $CMD ^ 0xFF]]
#	puts "send cmd($CMD): $CSUM"
	puts -nonewline $FlashSerial "[binary format c $CMD]"
	puts -nonewline $FlashSerial "[binary format c $CSUM]"
	flush $FlashSerial
	FlashWait_reply
}

proc FlashCmdEraseMemory {} {
	global FlashSerial
	.info configure -text "erase flash"
	update
	FlashCmdGeneric "0x43"
#	puts "send addr: 0xFF+0x00"
	puts -nonewline $FlashSerial "[binary format c 0xFF]"
	flush $FlashSerial
	puts -nonewline $FlashSerial "[binary format c 0x00]"
	flush $FlashSerial
	FlashWait_reply
}

proc FlashSendData {START_ADDR BUFFER} {
	global FlashSerial
	FlashCmdGeneric 0x31
	set ADDR_BYTE4 "0x[string range [format %x $START_ADDR] 5 6]"
	set ADDR_BYTE3 "0x[string range [format %x $START_ADDR] 3 4]"
	set ADDR_BYTE2 "0x[string range [format %x $START_ADDR] 1 2]"
	set ADDR_BYTE1 "0x0[string range [format %x $START_ADDR] 0 0]"
	set ADDR_CRC "[format 0x%x [expr $ADDR_BYTE1 ^ $ADDR_BYTE2 ^ $ADDR_BYTE3 ^ $ADDR_BYTE4]]"
#	puts "send_addr: $ADDR_BYTE1 ^ $ADDR_BYTE2 ^ $ADDR_BYTE3 ^ $ADDR_BYTE4 -- $ADDR_CRC"
#	puts "$START_ADDR - $BUFFER"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE1]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE2]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE3]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE4]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_CRC]"
	flush $FlashSerial
	FlashWait_reply
	set LEN 256
#	puts "send len: [format 0x%x [expr $LEN - 1]]"
	puts -nonewline $FlashSerial "[binary format c "[format 0x%x [expr $LEN - 1]]"]"
#	puts "send data..."
	set NUM 0
	set CRC "0xFF"
	foreach BYTE $BUFFER {
		set CRC [expr $CRC ^ $BYTE]
#		puts -nonewline "$BYTE "
#		puts "$NUM - $BYTE - [format 0x%x $CRC]"
		puts -nonewline $FlashSerial "[binary format c $BYTE]"
		flush $FlashSerial
		incr NUM
	}
#	puts ""
#	puts "send crc: [format 0x%x $CRC]"
	puts -nonewline $FlashSerial "[binary format c "[format 0x%x $CRC]"]"
	flush $FlashSerial
	FlashWait_reply
}

proc FlashSendBIN {START_ADDR BINFILE} {
	set binfile [open $BINFILE r]
	fconfigure $binfile -translation binary
	set file_data [read $binfile]
	close $binfile
	set BUFFER ""
	set COUNT 0
	if {$file_data != ""} {
		set MAX_ADDR [expr [llength [split $file_data ""]] / 256 + $START_ADDR]
		puts "# [format 0x%x $MAX_ADDR] #"

		FlashCmdEraseMemory

		foreach BYTE [split $file_data ""] {
			binary scan $BYTE c num
			if {$num < 0} {
				set num [expr $num + 256]
			}
	#		puts "$COUNT [format 0x%x $num]"
			lappend BUFFER "[format 0x%x $num]"
			if {$COUNT == 255} {

				.info configure -text "write: [format 0x%x $START_ADDR]"
				.note.flash.button.scale configure -value [expr ($START_ADDR - 0x8000000) * 100 / ($MAX_ADDR - 0x8000000)]
				update

				FlashSendData $START_ADDR $BUFFER
				incr START_ADDR 256
				set BUFFER ""
				set COUNT 0
			} else {
				incr COUNT
			}
		}
		set NUM 0
		while {$NUM < [expr 256 - $COUNT]} {
			lappend BUFFER "0xFF"
			incr NUM
		}
		FlashSendData $START_ADDR $BUFFER
		.info configure -text "write: done"
		.note.flash.button.scale configure -value 100
		update

	} else {
		.info configure -text "error loading BIN-File"
		update
		after 1000
	}
}

proc FlashSendHEX {START_ADDR HEXFILE} {
	if {[string tolower [lindex [split $HEXFILE ":"] 0]] == "http"} {
		set file_data [ getPage $HEXFILE ]
	} else {
		set hexfile [open $HEXFILE r]
		set file_data [read $hexfile]
		close $hexfile
	}
	if {[string range $file_data 0 4] == ":0200"} {
		set BUFFER ""
		set START_ADDR "0x8000000"

		set MAX_ADDR $START_ADDR

		foreach LINE $file_data {
			set HEX_LEN  "[format %i "0x[string range $LINE 1 2]"]"
			set HEX_ADDR "0x[string range $LINE 3 6]"
			set HEX_TYPE "0x[string range $LINE 7 8]"
			set HEX_DATA "[string range $LINE 9 [expr 9 + [expr $HEX_LEN * 2] - 1]]"
			set HEX_CSUM "0x[string range $LINE [expr 9 + [expr $HEX_LEN * 2]] [expr 9 + [expr $HEX_LEN * 2] + 1]]"
			set NUM 0
			while {$NUM < [expr 16 - $HEX_LEN]} {
				append HEX_DATA "00"
				incr NUM
			}
			if {$HEX_TYPE == "0x00"} {
				set START 0
				set PART [string range $HEX_DATA $START [expr $START + 1]]
				while {$PART != ""} {
					lappend BUFFER "0x$PART"
					set LEN "[llength $BUFFER]"
					if {$LEN == 256} {
						incr MAX_ADDR 256
						set BUFFER ""
					}
					incr START +2
					set PART [string range $HEX_DATA $START [expr $START + 1]]
				}
			}
		}
		incr MAX_ADDR 256

		FlashCmdEraseMemory
		set BUFFER ""
		foreach LINE $file_data {
			set HEX_LEN  "[format %i "0x[string range $LINE 1 2]"]"
			set HEX_ADDR "0x[string range $LINE 3 6]"
			set HEX_TYPE "0x[string range $LINE 7 8]"
			set HEX_DATA "[string range $LINE 9 [expr 9 + [expr $HEX_LEN * 2] - 1]]"
			set HEX_CSUM "0x[string range $LINE [expr 9 + [expr $HEX_LEN * 2]] [expr 9 + [expr $HEX_LEN * 2] + 1]]"
			set NUM 0
			while {$NUM < [expr 16 - $HEX_LEN]} {
				append HEX_DATA "00"
				incr NUM
			}
			if {$HEX_TYPE == "0x00"} {
				set START 0
				set PART [string range $HEX_DATA $START [expr $START + 1]]
				while {$PART != ""} {
					lappend BUFFER "0x$PART"
					set LEN "[llength $BUFFER]"
					if {$LEN == 256} {

						.info configure -text "write: [format 0x%x $START_ADDR]"
						.note.flash.button.scale configure -value [expr ($START_ADDR - 0x8000000) * 100 / ($MAX_ADDR - 0x8000000)]
						update

						FlashSendData $START_ADDR $BUFFER
						incr START_ADDR 256
						set BUFFER ""
					}
					incr START +2
					set PART [string range $HEX_DATA $START [expr $START + 1]]
				}
			}
		}
	#	puts "## $LEN [expr 256 - $LEN] ##"
		set NUM 0
		while {$NUM < [expr 256 - $LEN]} {
			lappend BUFFER "0xFF"
			incr NUM
		}
	#	puts "[llength $BUFFER]"
		FlashSendData $START_ADDR $BUFFER
		.info configure -text "write: done"
		.note.flash.button.scale configure -value 100
		update
	} else {
		.info configure -text "error loading HEX-File"
		update
		after 1000
	}
}

proc FlashResetSystem {START_ADDR} {
	global FlashSerial
	.info configure -text "booting firmware"
	update
	FlashCmdGeneric "0x21"
	set ADDR_BYTE4 "0x[string range [format %x $START_ADDR] 5 6]"
	set ADDR_BYTE3 "0x[string range [format %x $START_ADDR] 3 4]"
	set ADDR_BYTE2 "0x[string range [format %x $START_ADDR] 1 2]"
	set ADDR_BYTE1 "0x0[string range [format %x $START_ADDR] 0 0]"
	set ADDR_CRC "[format 0x%x [expr $ADDR_BYTE1 ^ $ADDR_BYTE2 ^ $ADDR_BYTE3 ^ $ADDR_BYTE4]]"
#	puts "send_addr: $ADDR_BYTE1 ^ $ADDR_BYTE2 ^ $ADDR_BYTE3 ^ $ADDR_BYTE4 -- $ADDR_CRC"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE1]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE2]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE3]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_BYTE4]"
	puts -nonewline $FlashSerial "[binary format c $ADDR_CRC]"
	flush $FlashSerial
	FlashWait_reply
}

proc FlashFirmwareFile {FILE} {
	global FlashSerial
	global FlashTimeout
	set START_ADDR "0x8000000"
	set device [.device.spin get]
	set FlashSerial [FlashSerial_Init $device 115200]
	set FlashTimeout 0
	FlashInitChip
	if {$FlashTimeout != 0} {
		return
	}
	if {[string tolower [lindex [split $FILE "."] end]] == "bin"} {
		.info configure -text "Binary File"
		update
		FlashSendBIN $START_ADDR $FILE
	} elseif {[string tolower [lindex [split $FILE "."] end]] == "hex"} {
		.info configure -text "HEX File"
		update
		FlashSendHEX $START_ADDR $FILE
	} else {
		.info configure -text "Unknown File"
		update
	}
	after 300
	FlashResetSystem "0x8000000"
	FlashSerial_Close
}

#####################################################################################
# Serial-Functions
#####################################################################################

proc serial_send {Serial line} {
	.info configure -text "send: $line"
	update
	puts -nonewline $Serial "$line\n\r"
	flush $Serial
	after 7
}

proc Serial_Close {} {
	global Serial
	catch {close $Serial}
}

proc Serial_Init {ComPort ComRate} {
	global Serial
	catch {close $Serial}
	catch {fileevent $Serial readable ""}
	set iChannel 0
	if {[catch {
		set iChannel [open $ComPort w+]
		fconfigure $iChannel -mode $ComRate,n,8,1 -ttycontrol {RTS 1 DTR 0} -blocking FALSE
		fileevent $iChannel readable [list rd_chid $iChannel]
		.version configure -text "Serial-Ok: $ComPort @ $ComRate"
		.info configure -text "Serial-Ok: $ComPort @ $ComRate"
	}]} {
		.version configure -text "Serial-Error: $ComPort @ $ComRate"
		.info configure -text "Serial-Error: $ComPort @ $ComRate"
	}
	return $iChannel
}

proc connect_serial {} {
	global Serial
	global mode
	global count
	global device
	global baud

	.version configure -text "waiting......"
	.mixer configure -text "waiting......"
	.info configure -text "waiting......"
	update

	set device [.device.spin get]
	set Serial [Serial_Init $device $baud]
	set mode ""
	set count 0

	if {$Serial == 0} {
		set mode ""
		return
	}

	puts -nonewline $Serial "#\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "version\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "status\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "map\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "mixer list\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "mixer\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "feature list\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "feature\n\r"
	flush $Serial
	after 100

	puts -nonewline $Serial "set *\n\r"
	flush $Serial
	after 200

#	puts -nonewline $Serial "set\n\r"
#	flush $Serial
#	after 200

	puts -nonewline $Serial "aux\n\r"
	flush $Serial
	after 200

	puts -nonewline $Serial "servo\n\r"
	flush $Serial
	after 200

#	puts -nonewline $Serial "cmix\n\r"
#	flush $Serial
#	after 200
}

proc rd_chid {chid} {
	global buffer
	global mode
	global channels
	global channel
	global mixer_set
	global mixer_list
	global mixerval
	global feature_enabled
	global feature_list
	global features
	global aux
	global aux_bit
	global settings
	global cmix_TABLE
	global I2CDevices
	global servo
	if {$chid == 0} {
		return
	}
#	catch {
		set ch [read $chid 1]

		if {$ch == "\n"} {
			if {$mode == "features"} {
				if {$buffer == ""} {
					set mode ""
				} else {
					set feature "[string trim $buffer]"
					lappend feature_list $feature
					catch {
						frame .note.features.[string tolower $feature]
						pack .note.features.[string tolower $feature] -side top -expand yes -fill x

						checkbutton .note.features.[string tolower $feature].check -text "$feature" -relief flat -variable features($feature)
						pack .note.features.[string tolower $feature].check -side left -expand yes -fill x

						eval button .note.features.[string tolower $feature].help -text "HELP" -command \{show_help [string toupper $feature]\}
						pack .note.features.[string tolower $feature].help -side right -expand no -fill none

					}
					set features($feature) 0
				}
			} elseif {$mode == "scani2cbus"} {
				if {[string match "I2C device found at*" $buffer]} {
					set addr [lindex $buffer 5]
					set chip [lindex $buffer 8]

					append I2CDevices "\n$buffer"

					.note.scan.output.info configure -text "$I2CDevices"

				} else {
					set mode ""
				}
			} elseif {$mode == "settings"} {
				## Workaround ##
				if {[string match "Current settings: *" $buffer]} {
					set buffer [string range $buffer 18 end]
				}

				set check [string tolower $buffer]
				set var [lindex $buffer 0]
				set val [lindex $buffer 2]
				set min [lindex $buffer 3]
				set max [lindex $buffer 4]
				if {$min == ""} {
					set min "-99999"
				}
				if {$max == ""} {
					set max "99999"
				}
				if {[string match "gimbal_*" $check]} {
					set section "gimbal"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "gps_*" $check]} {

					set section "gps"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					if {[string match "*brake*" $var]} {
						set firststr "brake"
						set laststr [lrange [split $var "_"] 1 end]
						set fside "right"
					} elseif {[string match "*_pos_*" $var] || [string match "*_posr_*" $var] || [string match "*_nav_*" $var] || [string match "*_ph_*" $var] || [string match "*_rtl_*" $var]} {
						set fside "right"
					} else {
						set fside "left"
					}
					catch {
						labelframe .note.settings.subnote.$section.$fside.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$fside.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$fside.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "tri_*" $check]} {
					set section "tri"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "failsafe_*" $check] || [string match "spektrum_*" $check] || [string match "midrc*" $check] || [string match "rc_*" $check] || [string match "aux*" $check] || [string match "deadband*" $check]} {
					set section "rc"
					if {[string match "failsafe_*" $check]} {
						set firststr "failsafe"
					} elseif {[string match "spektrum_*" $check]} {
						set firststr "spektrum"
					} else {
						set firststr "misc"
					}
					set laststr $var
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "vbat*" $check] || [string match "power_*" $check]} {
					set section "vbat"
					if {[string match "vbat*" $check]} {
						set firststr "vbat"
					} else {
						set firststr "adc"
					}
					set laststr $var
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "wing_*" $check]} {
					set section "wing"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "baro*" $check] || [string match "sonar*" $check]} {
					set section "alt"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					if {$firststr == ""} {
						set firststr "etc"
					}
					if {$laststr == ""} {
						set laststr $var
					}
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "led*" $check] || [string match "mwcrgb*" $check]} {
					set section "led"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					if {$firststr == ""} {
						set firststr "etc"
					}
					if {$laststr == ""} {
						set laststr $var
					}
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "pitch_*" $check] || [string match "roll_*" $check] || [string match "yaw*" $check]} {
					set section "pitchrollyaw"
					set firststr [string tolower [lindex [split $var "_"] 0]]
					set laststr [lrange [split $var "_"] 1 end]
					if {$firststr == "yawdeadband" || $firststr == "yawrate"} {
						set firststr "yaw"
						set laststr "[string range $var 3 end]"
					}
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "$laststr"
				} elseif {[string match "align_*" $check]} {
					set section "align"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "acc_*" $check] || [string match "gyro_*" $check] || [string match "accz_*" $check] || [string match "mag_*" $check]} {
					set section "accgyromag"
					set firststr [string tolower [lindex [split $var "_"] 0]]
					set laststr [lrange [split $var "_"] 1 end]
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "nav_*" $check] || [string match "autoland*" $check]} {
					set section "nav"
					set firststr [string tolower [lindex [split $var "_"] 1]]
					set laststr [lrange [split $var "_"] 2 end]
					if {$firststr == ""} {
						set firststr "etc"
					}
					if {$laststr == ""} {
						set laststr $var
					}
					catch {
						labelframe .note.settings.subnote.$section.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				} elseif {[string match "p_*" $check] || [string match "i_*" $check] || [string match "d_*" $check]} {
					set section "pid"
					set pid [lindex [split $var "_"] 0]
					set sub [lindex [split $var "_"] 1]
					if {[string match "*alt*" $var] || [string match "*level*" $var]} {
						set fside "right"
					} else {
						set fside "left"
					}
					catch {
						labelframe .note.settings.subnote.$section.$fside.$sub -text "$sub"
						pack .note.settings.subnote.$section.$fside.$sub -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$fside.$sub.[string tolower $var]"
					set labeltext "[string toupper $pid]"
				} elseif {[string match "#*" $check]} {
					set mode ""
				} else {
					set section "etc"
					set fside "left"
					if {[string match "*check*" $check]} {
						set firststr "check"
						set fside "right"
					} elseif {[string match "*throttle*" $check] || [string match "*thr_*" $check]} {
						set firststr "throttle"
						set fside "right"
					} elseif {[string match "*_pwm_*" $check]} {
						set firststr "pwm"
						set fside "right"
					} elseif {[string match "led_*" $check]} {
						set firststr "led"
						set fside "right"
					} elseif {[string match "serial_*" $check]} {
						set firststr "serial"
					} elseif {[string match "*deadband*" $check]} {
						set firststr "deadband"
					} else {
						set firststr "misc"
					}
					set laststr $var
					catch {
						labelframe .note.settings.subnote.$section.$fside.$firststr -text "[string toupper $firststr]"
						pack .note.settings.subnote.$section.$fside.$firststr -side top -expand yes -fill both
					}
					set wpath ".note.settings.subnote.$section.$fside.$firststr.[string tolower $var]"
					set labeltext "[string toupper $laststr]"
				}
				if {$var != ""} {
					catch {
						frame $wpath
						pack $wpath -side top -expand yes -fill x

#							if {$labeltext == ""} {
								set labeltext "[string toupper $var]"
#							}

							label $wpath.label -text "$labeltext" -width 10 -anchor w
							pack $wpath.label -side left -expand yes -fill x

							if {[string match "*.*" $min] || [string match "*.*" $max] || [string match "*.*" $val]} {
								scale $wpath.scale -orient horizontal -length 100 -from $min -to $max -variable settings($var) -tickinterval 0 -resolution 0.001 -showvalue false
								pack $wpath.scale -side left -expand yes -fill x

								entry $wpath.entry -width 5 -textvariable settings($var)
								pack $wpath.entry -side left -expand no -fill x
							} else {
								if {$min == 0 && $max == 1} {
									checkbutton $wpath.check -text "0/1" -relief flat -anchor w -variable settings($var)
									pack $wpath.check -side left -expand yes -fill x
								} else {
									scale $wpath.scale -orient horizontal -length 100 -from $min -to $max -variable settings($var) -tickinterval 0 -resolution 1 -showvalue false
									pack $wpath.scale -side left -expand yes -fill x

									entry $wpath.entry -width 5 -textvariable settings($var)
									pack $wpath.entry -side left -expand no -fill x
								}
							}

#							eval button $wpath.down -width 1 -text \"-\" -command \{incr settings($var) -1\}
#							pack $wpath.down -side left -expand no -fill none

#							eval button $wpath.up -width 1 -text \"+\" -command \{incr settings($var) +1\}
#							pack $wpath.up -side left -expand no -fill none

							eval button $wpath.send -width 1 -text \"S\" -command \{save_setting $var\}
							pack $wpath.send -side left -expand no -fill none

							eval button $wpath.help -width 1 -text \"?\" -command \{show_help [string toupper $var]\}
							pack $wpath.help -side left -expand no -fill none
					}
					set settings($var) $val
				} else {
					set mode ""
				}
			} else {
				#puts "$buffer"
				if {[string match "System Uptime*" $buffer]} {
					.info configure -text "$buffer"
				} elseif {[string match "Naze32*" $buffer] || [string match "Afro32*" $buffer]} {
					.version configure -text "$buffer"
				} elseif {[string match "*detected sensors: *" $buffer]} {
					.sensors configure -text "[lrange [split $buffer ":"] 1 end]"
				} elseif {[string match "Rebooting*" $buffer]} {
					.version configure -text "$buffer"
					update
				} elseif {[string match "Current settings:*" $buffer]} {
					set mode "settings"
				} elseif {[string match "*Scanning I2C-Bus*" $buffer]} {
					set mode "scani2cbus"
					set I2CDevices ""
					.version configure -text "$buffer"
					update
				} elseif {[string match "Current assignment:*" $buffer]} {
					set channels "[split [lindex $buffer 2] ""]"
					foreach part {{roll A} {pitch E} {throttle T} {yaw R} {aux1 1} {aux2 2} {aux3 3} {aux4 4}} {
						set var [lindex $part 0]
						set varval [lindex $part 1]
						set val [lsearch $channels $varval]
						catch {
							frame .note.channels.$var
							pack .note.channels.$var -side top -expand yes -fill x

							label .note.channels.$var.label -text "$var" -width 10
							pack .note.channels.$var.label -side left -expand yes -fill x

							if {[catch {ttk::combobox .note.channels.$var.spin -textvariable channel($varval) -state readonly -values {1 2 3 4 5 6 7 8}}]} {
								spinbox .note.channels.$var.spin -values {1 2 3 4 5 6 7 8} -width 10 -textvariable channel($varval)
							}
							pack .note.channels.$var.spin -side left -expand yes -fill x
						}
						set channel($varval) [expr $val + 1]
					}
				} elseif {[string match "Current mixer:*" $buffer]} {
					set mixer_set "[lindex $buffer 2]"
					.mixer configure -text "Mixer: $mixer_set"
				} elseif {[string match "Available mixers:*" $buffer]} {
					set mixer_list "[lrange $buffer 2 end]"
					catch {
						frame .note.mixer.frame.setup
						pack .note.mixer.frame.setup -side left -expand yes -fill both
					}
					foreach mixer $mixer_list {
						catch {
							frame .note.mixer.frame.setup.[string tolower $mixer]
							pack .note.mixer.frame.setup.[string tolower $mixer] -side top -expand yes -fill both

							radiobutton .note.mixer.frame.setup.[string tolower $mixer].check -text "$mixer" -relief flat -variable mixer_set -value $mixer
							pack .note.mixer.frame.setup.[string tolower $mixer].check -side top -expand yes -fill both
						}
					}
				} elseif {[string match "Available features:*" $buffer]} {
					set feature_list "[lrange $buffer 2 end]"
					if {$feature_list != ""} {
						foreach feature $feature_list {
							catch {
								frame .note.features.[string tolower $feature]
								pack .note.features.[string tolower $feature] -side top -expand yes -fill x
	
								checkbutton .note.features.[string tolower $feature].check -text "$feature" -relief flat -variable features($feature)
								pack .note.features.[string tolower $feature].check -side left -expand yes -fill x
							}
							set features($feature) 0
						}
					} else {
						set feature_list ""
						set mode "features"
					}
				} elseif {[string match "Enabled features:*" $buffer]} {
					set feature_enabled "[lrange $buffer 2 end]"
					foreach feature $feature_list {
						set features($feature) 0
					}
					foreach feature $feature_enabled {
						set features($feature) 1
					}
				} elseif {[string match "#*:*" $buffer]} {
					set NUM [expr [lindex [split $buffer "#:"] 1] - 1]
					set cmix_TABLE($NUM,Throttle) [lindex [split $buffer "\t"] 1]
					set cmix_TABLE($NUM,Roll) [lindex [split $buffer "\t"] 2]
					set cmix_TABLE($NUM,Pitch) [lindex [split $buffer "\t"] 3]
					set cmix_TABLE($NUM,Yaw) [lindex [split $buffer "\t"] 4]
				} elseif {[string match "aux *" $buffer]} {
					set aux_num "[lindex $buffer 1]"
					set aux_val "[lindex $buffer 2]"
					set bit_num 0
					foreach bit [lrange [lreverse [int2bits $aux_val]] 0 14] {
						set aux_num2 "[expr $bit_num / 3]"
						catch {
							checkbutton .note.aux.aux_$aux_num2.bits.bit_$bit_num.aux_$aux_num -text "" -relief flat -variable aux_bit($aux_num,$bit_num)
							pack .note.aux.aux_$aux_num2.bits.bit_$bit_num.aux_$aux_num -side top -expand yes -fill x
						}
						set aux_bit($aux_num,$bit_num) $bit
						incr bit_num
					}
					set aux($aux_num) $aux_val
				} elseif {[string match "servo *" $buffer]} {
					set servo_num [lindex $buffer 1]
					set servo($servo_num,min) [lindex $buffer 2]
					set servo($servo_num,max) [lindex $buffer 3]
					set servo($servo_num,center) [lindex $buffer 4]
					set rev_drate [lindex $buffer 5]
					if {$rev_drate < 0} {
						set servo($servo_num,drate) [expr $rev_drate * -1]
						set servo($servo_num,rev) 1
					} else {
						set servo($servo_num,drate) $rev_drate
						set servo($servo_num,rev) 0
					}
					catch {
						labelframe .note.servos.s$servo_num -text "Servo-[expr $servo_num + 1]"
						pack .note.servos.s$servo_num -side top -expand yes -fill x
	
						scale .note.servos.s$servo_num.min -orient horizontal -length 100 -from 800 -to 2200 -variable servo($servo_num,min) -tickinterval 0 -resolution 1 -showvalue true
						pack .note.servos.s$servo_num.min -side left -expand yes -fill x

						scale .note.servos.s$servo_num.center -orient horizontal -length 100 -from 800 -to 2200 -variable servo($servo_num,center) -tickinterval 0 -resolution 1 -showvalue true
						pack .note.servos.s$servo_num.center -side left -expand yes -fill x

						scale .note.servos.s$servo_num.max -orient horizontal -length 100 -from 800 -to 2200 -variable servo($servo_num,max) -tickinterval 0 -resolution 1 -showvalue true
						pack .note.servos.s$servo_num.max -side left -expand yes -fill x

						scale .note.servos.s$servo_num.drate -orient horizontal -length 100 -from 0 -to 100 -variable servo($servo_num,drate) -tickinterval 0 -resolution 1 -showvalue true
						pack .note.servos.s$servo_num.drate -side left -expand yes -fill x

						checkbutton .note.servos.s$servo_num.rev -text "$servo_num - $buffer" -relief flat -text "REV" -variable servo($servo_num,rev)
						pack .note.servos.s$servo_num.rev -side left -expand yes -fill x
					}
				} elseif {[string match "#*" $buffer]} {
					set mode ""
				}
			}
			set buffer ""
		} else {
			append buffer $ch
		}
#	}
}

proc comport_find {} {
	global tcl_platform
	global comports
	global device
	if {[string match "*Linux*" $tcl_platform(os)]} {
		catch {set comports [glob /dev/ttyUSB*]}
		set device "[lindex $comports end]"
	} elseif {[string match "*Windows*" $tcl_platform(os)]} {
		set comports {"com1:" "com2:" "com3:" "com4:" "com5:" "com6:" "com7:" "com8:" "com9:" "com10:" "com11:" "com12:" "com13:" "com14:" "com15:"}
		catch {
			set serial_base "HKEY_LOCAL_MACHINE\\HARDWARE\\DEVICEMAP\\SERIALCOMM"
			set values [registry values $serial_base]
			set res {}
			foreach valueName $values {
				set PortName [registry get $serial_base $valueName]
				lappend res "$PortName:"
			}
			set comports $res
		}
		set device "[lindex $comports end]"
	} elseif {[string match "*Darwin*" $tcl_platform(os)] || [string match "*MacOS*" $tcl_platform(os)]} {
		catch {set comports [glob /dev/cu.*]}
		set device "[lindex $comports end]"
	}
}

#####################################################################################
# File-Functions
#####################################################################################

proc save_setting {var} {
	global Serial
	global settings
	if {$Serial != 0} {
		serial_send $Serial "set $var=$settings($var)"
	} else {
		.info configure -text "send: error, no serial connection"
		update
	}
}

proc fileDialog {w operation} {
	global Serial
	global settings
	global channel
	global feature_list
	global feature_enabled
	global features
	global aux_bit
	global mixer_set
	set types {
		{"Text files"		{.txt}	}
		{"Text files"		{}		TEXT}
		{"All files"		*}
	}
	if {$operation == "open"} {
		global selected_type
		if {![info exists selected_type]} {
			set selected_type "Tcl Scripts"
		}
		set file [tk_getOpenFile -filetypes $types -parent $w -typevariable selected_type]
		if {$file != ""} {
			set fp [open $file r]
			if {$fp > 0} {
				set file_data [read $fp]
				close $fp
				foreach line "[split $file_data "\n"]" {
					if {$line != ""} {
						serial_send $Serial $line
					}
				}
				.info configure -text "load: done"
				update
				connect_serial
			} else {
				.info configure -text "load: error, reading file: $file"
				update
			}
		}
	} else {
		set file [tk_getSaveFile -filetypes $types -parent $w -initialfile mw32 -defaultextension .txt]
		if {$file != ""} {
			set fp [open $file w]
			if {$fp > 0} {
				foreach var "[array names settings]" {
					puts $fp "set $var=$settings($var)"
				}
				set channels_set ""
				foreach val "1 2 3 4 5 6 7 8" {
					foreach var "[array names channel]" {
						if {$channel($var) == $val} {
							append channels_set "$var"
						}
					}
				}
				puts $fp "map $channels_set"
				puts $fp "mixer $mixer_set"
				foreach var "[array names features]" {
					if {$features($var) == 1} {
						puts $fp "feature $var"
					} else {
						puts $fp "feature -$var"
					}
				}
				catch {
					foreach val "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14" {
						set bin ""
						foreach val2 "11 10 9 8 7 6 5 4 3 2 1 0" {
							append bin $aux_bit($val,$val2)
						}
						puts $fp "aux $val [bits2int $bin]"
					}
				}
				catch {
					foreach servo_num "0 1 2 3 4 5 6 7" {
						if {$servo($servo_num,rev) == 1} {
							puts $fp "servo $servo_num $servo($servo_num,min) $servo($servo_num,max) $servo($servo_num,center) -$servo($servo_num,drate)"
						} else {
							puts $fp "servo $servo_num $servo($servo_num,min) $servo($servo_num,max) $servo($servo_num,center) $servo($servo_num,drate)"
						}
					}
				}
				close $fp
				.info configure -text "save2file: done"
				update
			} else {
				.info configure -text "save2file: error, writing file: $file"
				update
			}
		}
	}
}

#####################################################################################
# cMix-Functions
#####################################################################################

proc cmix_init {} {
	global cmix_TABLE
	set cmix_TABLE(SUM,Roll) 0
	set cmix_TABLE(SUM,Pitch) 0
	set cmix_TABLE(SUM,Yaw) 0
	set cmix_TABLE(SUM,Motors) 0
	foreach MOTOR {0 1 2 3 4 5 6 7} {
		set cmix_TABLE($MOTOR,Throttle) 0
		set cmix_TABLE($MOTOR,Pitch) 0
		set cmix_TABLE($MOTOR,Roll) 0
		set cmix_TABLE($MOTOR,Yaw) 0
		set cmix_TABLE($MOTOR,Port) [expr $MOTOR + 1]
	}
	set cmix_TABLE(0,Throttle) 30
	set cmix_TABLE(0,Pitch) 16
	set cmix_TABLE(0,Roll) -22
	set cmix_TABLE(0,Yaw) -32
	set cmix_TABLE(1,Throttle) 30
	set cmix_TABLE(1,Pitch) 16
	set cmix_TABLE(1,Roll) 22
	set cmix_TABLE(1,Yaw) 32
	set cmix_TABLE(2,Throttle) 30
	set cmix_TABLE(2,Pitch) -32
	set cmix_TABLE(2,Roll) 0
	set cmix_TABLE(2,Yaw) -32
	set cmix_TABLE(3,Throttle) 32
	set cmix_TABLE(3,Pitch) 16
	set cmix_TABLE(3,Roll) -22
	set cmix_TABLE(3,Yaw) 32
	set cmix_TABLE(4,Throttle) 32
	set cmix_TABLE(4,Pitch) 16
	set cmix_TABLE(4,Roll) 22
	set cmix_TABLE(4,Yaw) -32
	set cmix_TABLE(5,Throttle) 32
	set cmix_TABLE(5,Pitch) -32
	set cmix_TABLE(5,Roll) 0
	set cmix_TABLE(5,Yaw) 32
	set cmix_TABLE(6,Throttle) 0
	set cmix_TABLE(6,Pitch) 0
	set cmix_TABLE(6,Roll) 0
	set cmix_TABLE(6,Yaw) 0
	set cmix_TABLE(7,Throttle) 0
	set cmix_TABLE(7,Pitch) 0
	set cmix_TABLE(7,Roll) 0
	set cmix_TABLE(7,Yaw) 0
	foreach MOTOR {0 1 2 3 4 5 6 7} {
		cmix_draw_table_line $MOTOR
	}
}

proc cmix_plotDown {w x y} {
	global cmix_plot
	$w dtag selected
	$w addtag selected withtag current
	$w raise current
	set cmix_plot(lastX) $x
	set cmix_plot(lastY) $y
}

proc cmix_plotRev {w} {
	global cmix_TABLE
	global cmix_plot
	foreach TAG [$w gettags current] {
		if {[string match "motor_*" $TAG]} {
			set NUM [lindex [split $TAG "_"] 1]
			set cmix_TABLE($NUM,Yaw) [expr $cmix_TABLE($NUM,Yaw) * -1]
		}
	}
	cmix_update_table
}

proc cmix_plotUp {w x y} {
	global cmix_TABLE
	global cmix_plot
	$w move selected [expr {$x-$cmix_plot(lastX)}] [expr {$y-$cmix_plot(lastY)}]
	set cmix_plot(lastX) $x
	set cmix_plot(lastY) $y
	set MAX "[cmix_get_max]"

	set X [expr ([lindex [$w coords selected] 0] + 40 - 250) * $MAX / 200]
	set Y [expr ([lindex [$w coords selected] 1] + 40 - 250) * $MAX / 200]

	foreach TAG [$w gettags selected] {
		if {[string match "motor_*" $TAG]} {
			set NUM [lindex [split $TAG "_"] 1]
			if {$X > 100} {
				set X 100
			} elseif {$X < -100} {
				set X -<100
			}
			if {$Y > 100} {
				set Y 100
			} elseif {$Y < -100} {
				set Y -100
			}
			set cmix_TABLE($NUM,Roll) $X
			set cmix_TABLE($NUM,Pitch) $Y 
		}
	}
}

proc cmix_plotMove {w x y} {
	global cmix_TABLE
	global cmix_plot
	$w move selected [expr {$x-$cmix_plot(lastX)}] [expr {$y-$cmix_plot(lastY)}]
	set cmix_plot(lastX) $x
	set cmix_plot(lastY) $y
}

proc cmix_allRev {} {
	global cmix_TABLE
	foreach MOTOR {0 1 2 3 4 5 6 7} {
		set cmix_TABLE($MOTOR,Yaw) [expr $cmix_TABLE($MOTOR,Yaw) * -1]
	}
}

proc cmix_get_max {} {
	global cmix_TABLE
	set MAX 0
	foreach MOTOR {0 1 2 3 4 5 6 7} {
		if {![catch {set X $cmix_TABLE($MOTOR,Roll); set Y $cmix_TABLE($MOTOR,Pitch); set Z $cmix_TABLE($MOTOR,Yaw); set A $cmix_TABLE($MOTOR,Throttle)}]} {
			if {$X < 0} {
				set X [expr $X * -1] 
			}
			if {$Y < 0} {
				set Y [expr $Y * -1] 
			}
			if {$Z < 0} {
				set Z [expr $Z * -1] 
			}
			if {$A < 0} {
				set A [expr $A * -1] 
			}
			if {$X > $MAX} {
				set MAX $X
			}
			if {$Y > $MAX} {
				set MAX $Y
			}
			if {$Z > $MAX} {
				set MAX $Z
			}
			if {$A > $MAX} {
				set MAX $A
			}
		}
	}
	return $MAX
}

proc cmix_draw_table_line {NUM} {
	frame .note.cmixer.table.motor$NUM
	pack .note.cmixer.table.motor$NUM -expand yes -fill x

		label .note.cmixer.table.motor$NUM.num -text "Motor: [expr $NUM + 1]" -width 10
		pack .note.cmixer.table.motor$NUM.num -side left -expand yes -fill x

		entry .note.cmixer.table.motor$NUM.pitch -textvariable cmix_TABLE($NUM,Pitch) -width 10
		pack .note.cmixer.table.motor$NUM.pitch -side left -expand yes -fill x

		entry .note.cmixer.table.motor$NUM.roll -textvariable cmix_TABLE($NUM,Roll) -width 10
		pack .note.cmixer.table.motor$NUM.roll -side left -expand yes -fill x

		entry .note.cmixer.table.motor$NUM.yaw -textvariable cmix_TABLE($NUM,Yaw) -width 10
		pack .note.cmixer.table.motor$NUM.yaw -side left -expand yes -fill x

		entry .note.cmixer.table.motor$NUM.throttle -textvariable cmix_TABLE($NUM,Throttle) -width 10
		pack .note.cmixer.table.motor$NUM.throttle -side left -expand yes -fill x

		ttk::combobox .note.cmixer.table.motor$NUM.port -textvariable cmix_TABLE($NUM,Port) -state readonly -values {1 2 3 4 5 6 7 8} -width 10
		pack .note.cmixer.table.motor$NUM.port -side left -expand yes -fill x
}

proc cmix_draw_rotor {TEXT X Y Z} {
	if {$X == 0 && $Y == 0} {
		return
	}
	set Z_OFFSET 2
	set X [expr $X * 2]
	set Y [expr $Y * 2]
	set Z [expr $Z * 2]
	.note.cmixer.canvas create line [expr 250 + $X] [expr 250 + $Y] 250 250 -fill gray -tags "fg"
	.note.cmixer.canvas create oval [expr 250 - 40 + $X] [expr 250 - 40 + $Y] [expr 250 + 40 + $X] [expr 250 + 40 + $Y] -outline gray -tags "fg"
	if {$Z < 0} {
		.note.cmixer.canvas create oval [expr 250 - 40 + $X + $Z_OFFSET] [expr 250 - 40 + $Y + $Z_OFFSET] [expr 250 + 40 + $X + $Z_OFFSET] [expr 250 + 40 + $Y + $Z_OFFSET] -outline yellow -tags "fg rotor motor_$TEXT"
		.note.cmixer.canvas create line [expr 250 - 2 + $X + $Z_OFFSET] [expr 250 - 40 + $Y + $Z_OFFSET] [expr 250 + 2 + $X + $Z_OFFSET] [expr 250 - 40 + $Y + $Z_OFFSET] -fill yellow -tags "fg" -arrow first
		.note.cmixer.canvas create text [expr 250 + $X] [expr 250 + $Y + 6] -text "$TEXT (CCW)" -fill yellow -tags "fg"
	} else {
		.note.cmixer.canvas create oval [expr 250 - 40 + $X - $Z_OFFSET] [expr 250 - 40 + $Y - $Z_OFFSET] [expr 250 + 40 + $X - $Z_OFFSET] [expr 250 + 40 + $Y - $Z_OFFSET] -outline green -tags "fg rotor motor_$TEXT"
		.note.cmixer.canvas create line [expr 250 - 2 + $X - $Z_OFFSET] [expr 250 - 40 + $Y - $Z_OFFSET] [expr 250 + 2 + $X - $Z_OFFSET] [expr 250 - 40 + $Y - $Z_OFFSET] -fill green -tags "fg" -arrow last
		.note.cmixer.canvas create text [expr 250 + $X] [expr 250 + $Y - 6] -text "$TEXT (CW)" -fill green -tags "fg"
	}
}

proc cmix_update_table {} {
	global cmix_TABLE
	.note.cmixer.canvas delete "fg"
	catch {
		set MAX "[cmix_get_max]"
		set cmix_TABLE(SUM,Roll) 0
		set cmix_TABLE(SUM,Pitch) 0
		set cmix_TABLE(SUM,Yaw) 0
		set cmix_TABLE(SUM,Motors) 0
		foreach MOTOR {0 1 2 3 4 5 6 7} {
			if {![catch {set X $cmix_TABLE($MOTOR,Roll); set Y $cmix_TABLE($MOTOR,Pitch); set Z $cmix_TABLE($MOTOR,Yaw)}]} {
				if {$X != 0 || $Y != 0 || $Z != 0} {
					cmix_draw_rotor $MOTOR [expr 100 * $X / $MAX] [expr 100 * $Y / $MAX] [expr 100 * $Z / $MAX]
					set cmix_TABLE(SUM,Roll) [expr $cmix_TABLE(SUM,Roll) + $X]
					set cmix_TABLE(SUM,Pitch) [expr $cmix_TABLE(SUM,Pitch) + $Y]
					set cmix_TABLE(SUM,Yaw) [expr $cmix_TABLE(SUM,Yaw) + $Z]
					incr cmix_TABLE(SUM,Motors)
				}
			}
		}
		.note.cmixer.canvas create oval [expr 250 - 20] [expr 250 - 20] [expr 250 + 20] [expr 250 + 20] -outline gray -tags "fg center" -fill gray

		if {$cmix_TABLE(SUM,Pitch) != 0} {
			.note.cmixer.table.sum.pitch configure -fg red
		} else {
			.note.cmixer.table.sum.pitch configure -fg black
		}
		if {$cmix_TABLE(SUM,Roll) != 0} {
			.note.cmixer.table.sum.roll configure -fg red
		} else {
			.note.cmixer.table.sum.roll configure -fg black
		}
		if {$cmix_TABLE(SUM,Yaw) != 0} {
			.note.cmixer.table.sum.yaw configure -fg red
		} else {
			.note.cmixer.table.sum.yaw configure -fg black
		}
	}
}

proc cmix_load_mixerfile {file} {
	global cmix_TABLE
	set cmix_TABLE(SUM,Roll) 0
	set cmix_TABLE(SUM,Pitch) 0
	set cmix_TABLE(SUM,Yaw) 0
	set cmix_TABLE(SUM,Motors) 0
	foreach MOTOR {0 1 2 3 4 5 6 7} {
		set cmix_TABLE($MOTOR,Throttle) 0
		set cmix_TABLE($MOTOR,Pitch) 0
		set cmix_TABLE($MOTOR,Roll) 0
		set cmix_TABLE($MOTOR,Yaw) 0
		set cmix_TABLE($MOTOR,Port) [expr $MOTOR + 1]
	}
	if {[string match "*mkm" $file] || [string match "*.mix" $file]} {
		set fp [open [lindex $file 0] r]
		set file_data [read $fp]
		close $fp
		set MODE ""
		foreach line [split $file_data "\n"] {
			if {[string match "\\\[*\\\]" $line]} {
				set MODE "[lindex [split $line "\[\]"] 1]"
				if {$MODE == "Nick"} {
					set MODE "Pitch"
				} elseif {$MODE == "Gas"} {
					set MODE "Throttle"
				}
			} elseif {[string match "Motors=*" $line]} {
			} elseif {[string match "Motor*=*" $line]} {
				set NUM [expr [string trim [lindex [split $line "="] 0] "Motor"] - 1]
				set VAL [lindex [split $line "="] 1]
				set cmix_TABLE($NUM,$MODE) $VAL
			}
		}
	} elseif {[string match "*bfm" $file] || [string match "*cmix" $file]} {
		set fp [open [lindex $file 0] r]
		set file_data [read $fp]
		close $fp
		foreach line [split $file_data "\n"] {
			if {[string match "#*:*" $line]} {
				set NUM [expr [lindex [split $line "#:"] 1] - 1]
				set cmix_TABLE($NUM,Throttle) [lindex $line 2]
				set cmix_TABLE($NUM,Roll) [lindex $line 3]
				set cmix_TABLE($NUM,Pitch) [lindex $line 4]
				set cmix_TABLE($NUM,Yaw) [lindex $line 5]
			}
		}
	}
	cmix_update_table
}

proc cmix_open_mixerfile {} {
	set types {
		{"Text files"		{.mix} }
		{"Text files"		{.mkm} }
		{"Text files"		{} TEXT}
		{"All files"		*}
	}
	global selected_type
	if {![info exists selected_type]} {
		set selected_type "Tcl Scripts"
	}
	set file [tk_getOpenFile -filetypes $types -parent . -typevariable selected_type]
	if {$file != ""} {
		cmix_load_mixerfile $file
	}
}

proc cmix_watch {varname key op} {
	if {! [string match "SUM,*" $key]} {
		cmix_update_table
	}
}

#####################################################################################
# XmlHelp-Function
#####################################################################################

proc xml_tag {tag cl selfcl props body}  {
	global OnlineHelp
	global Item
	global Description
	global Language
	global HELPTEXT
	if {$tag == "OnlineHelp"} {
		if {$cl == "0"} {
			set HELPTEXT(loaded) 1
			set OnlineHelp 0
			set Item ""
			set Description ""
			set Language ""
		} else {
			set OnlineHelp 1
			if {$Description != ""} {
				set map {Ã¤ ä Ã Ä Ã¼ ü Ã¼ Ü Ã¶ ö Ã Ö Ã ß &lt; < &gt; > <BR> \n}
				set Description_new [string map $map $Description]
				set map {\<BR\> \n}
				set Description [string map $map $Description_new]
#				puts "$Item,$Language=$Description"
				set HELPTEXT([string toupper $Item],$Language) "$Description"
			}
		}
	}
	if {$OnlineHelp == "0" && $cl == "0"} {
		if {$tag == "Item"} {
			set Item "$body"
		} elseif {$tag == "Description"} {
			set Description "$body"
		} elseif {$tag == "Language"} {
			set Language "$body"
		}
	}
}

proc xml_parse {cmd xml {start docstart}} {
	regsub -all \{ $xml {\&ob;} xml
	regsub -all \} $xml {\&cb;} xml
	set exp {<(/?)([^\s/>]+)\s*([^/>]*)(/?)>}
	set sub "\}\n$cmd {\\2} \[expr \{{\\1} ne \"\"\}\] \[expr \{{\\4} ne \"\"\}\] \
		\[regsub -all -- \{\\s+|(\\s*=\\s*)\} {\\3} \" \"\] \{"
	regsub -all $exp $xml $sub xml
	eval "$cmd {$start} 0 0 {} \{ $xml \}"
	eval "$cmd {$start} 1 1 {} {}"
}

proc show_help {SEARCH} {
	global HELPTEXT
	if {$HELPTEXT(loaded) == 0} {
		set xml_data [getPage "http://www.klick-punkte.info/download/help.xml"]
		if {$xml_data != ""} {
			xml_parse xml_tag $xml_data
		}
	}
	if {[info exists HELPTEXT($SEARCH,DE)]} {
		tk_dialog .dialog1 "Help: $SEARCH" "$HELPTEXT($SEARCH,DE)" info 0 OK
	} else {
		tk_dialog .dialog1 "Help: $SEARCH" "no help for: $SEARCH" info 0 OK
	}
}

#####################################################################################
# Misc-Functions
#####################################################################################

catch {package require http}

proc getPage { url } {
	.info configure -text "Downloading file: $url"
	update
	return [ ::http::data [ ::http::geturl $url ] ]
}

proc int2bits {i} {
	binary scan [binary format I1 $i] B* x
	split $x {}
}

proc bits2int {bits} {
	set bits [format %032s [join $bits {}]]
	binary scan [binary format B* $bits] I1 x
	set x
}


#####################################################################################
# GUI
#####################################################################################

wm title . "Baseflight-Tool (CLI-Frontend)"
wm minsize . 800 700



#####################################################################################
# Menu
#####################################################################################

menu .menu -tearoff 0
menu .menu.help -tearoff 0
	.menu add cascade -label "Help" -menu .menu.help -underline 0
	.menu.help add command -label "Naze Harakiri Guide (DE)" -command {
		launchBrowser "http://fdings.de/?q=tags/naze32"
	}
	.menu.help add command -label "Harakiri-Documentation (DE)" -command {
		launchBrowser "http://docs.google.com/document/d/1SdKXVoVkYw7Mp-FBL1ctxKqW3_pqexEClJ0X-GNGAkg/edit?pli=1#"
	}
	.menu.help add command -label "Naze32-Documentation (DE)" -command {
		launchBrowser "http://lazyzero.de/modellbau/multicoptersetup/naze32/start"
	}
	.menu.help add command -label "fpv-treff.de (Harakiri-Software)" -command {
		launchBrowser "http://fpv-treff.de/viewtopic.php?f=18&t=1368"
	}
	.menu.help add command -label "test XML-Help..." -command {
		show_help PPM
	}
	.menu.help add separator
	.menu.help add command -label "About..." -command {
		show_help_about
	}

	. configure -menu .menu


label .version -text "Version: $tcl_platform(os)/$tcl_platform(osVersion)"
pack .version -side top -expand no -fill x

label .mixer -text "Mixer: ---"
pack .mixer -side top -expand no -fill x

label .sensors -text "Sensors: ---"
pack .sensors -side top -expand no -fill x

labelframe .device -text "Connection"
pack .device -side top -expand no -fill x

	label .device.label -text "Port" -width 10
	pack .device.label -side top -expand yes -fill x

	comport_find

	if {[catch {ttk::combobox .device.spin -textvariable device -state readonly -values $comports}]} {
		spinbox .device.spin -values $comports -width 10  -textvariable device
	}
	pack .device.spin -side left -expand yes -fill x

	if {[catch {ttk::combobox .device.baud -textvariable baud -width 7 -state readonly -values $baudrates}]} {
		spinbox .device.baud -values $baudrates -width 7 -textvariable baud
	}
	pack .device.baud -side left -expand no -fill x

	button .device.connect -text "Connect/Reload" -width 15 -command {
		connect_serial
	}
	pack .device.connect -side left -expand no -fill x

ttk::notebook .note
pack .note -fill both -expand yes -fill both -padx 2 -pady 3

	ttk::frame .note.settings
	.note add .note.settings -text "Settings"

		ttk::notebook .note.settings.subnote
		pack .note.settings.subnote -fill both -expand 1 -padx 2 -pady 3

		foreach section "pid rc vbat pitchrollyaw align accgyromag alt gps nav gimbal wing tri led etc" {
			ttk::frame .note.settings.subnote.$section
			.note.settings.subnote add .note.settings.subnote.$section -text "$tabname($section)"
		}
		## adding unsorted tabnames ##
		foreach section "[array names tabname]" {
			catch {
				ttk::frame .note.settings.subnote.$section
				.note.settings.subnote add .note.settings.subnote.$section -text "$tabname($section)"
			}
		}

		frame .note.settings.subnote.gps.left
		pack .note.settings.subnote.gps.left -side left -expand yes -fill both

		frame .note.settings.subnote.gps.right
		pack .note.settings.subnote.gps.right -side left -expand yes -fill both

		frame .note.settings.subnote.etc.left
		pack .note.settings.subnote.etc.left -side left -expand yes -fill both

		frame .note.settings.subnote.etc.right
		pack .note.settings.subnote.etc.right -side left -expand yes -fill both

		frame .note.settings.subnote.pid.left
		pack .note.settings.subnote.pid.left -side left -expand yes -fill both

		frame .note.settings.subnote.pid.right
		pack .note.settings.subnote.pid.right -side left -expand yes -fill both

	ttk::frame .note.features
	.note add .note.features -text "Features"

	ttk::frame .note.channels
	.note add .note.channels -text "Channels"

		frame .note.channels.preset
		pack .note.channels.preset -side bottom -expand no -fill x

		button .note.channels.preset.futaba -text "Futaba(Default)" -command {
			set N 1
			foreach T [split "AETR1234" ""] {
				set channel($T) $N
				incr N
			}
		}
		pack .note.channels.preset.futaba -side left -expand yes -fill x

		button .note.channels.preset.jr -text "Graupner/Spektrum" -command {
			set N 1
			foreach T [split "TAER1234" ""] {
				set channel($T) $N
				incr N
			}
		}
		pack .note.channels.preset.jr -side left -expand yes -fill x

		button .note.channels.preset.mpx -text "Multiplex" -command {
			set N 1
			foreach T [split "AERT1234" ""] {
				set channel($T) $N
				incr N
			}
		}
		pack .note.channels.preset.mpx -side left -expand yes -fill x


	ttk::frame .note.mixer
	.note add .note.mixer -text "Mixer"

		frame .note.mixer.frame
		pack .note.mixer.frame -side top -expand yes -fill both

#			image create photo mixers -file types.gif

			label .note.mixer.frame.image -relief sunken -anchor center -image "mixers"
			pack .note.mixer.frame.image -side left -fill none -expand no


	ttk::frame .note.cmixer
	.note add .note.cmixer -text "Custom-Mixer"

		canvas .note.cmixer.canvas -relief raised -width 500 -height 500
		pack .note.cmixer.canvas -side left

		.note.cmixer.canvas create rec 1 1 500 500 -fill black -tags "bg"

		frame .note.cmixer.table
		pack .note.cmixer.table -expand yes -fill both

		frame .note.cmixer.table.title
		pack .note.cmixer.table.title -expand yes -fill both

			label .note.cmixer.table.title.motor -text "Motor" -width 10
			pack .note.cmixer.table.title.motor -side left -expand yes -fill x

			label .note.cmixer.table.title.pitch -text "Pitch" -width 10
			pack .note.cmixer.table.title.pitch -side left -expand yes -fill x

			label .note.cmixer.table.title.roll -text "Roll" -width 10
			pack .note.cmixer.table.title.roll -side left -expand yes -fill x

			label .note.cmixer.table.title.yaw -text "Yaw" -width 10
			pack .note.cmixer.table.title.yaw -side left -expand yes -fill x

			label .note.cmixer.table.title.throttle -text "Throttle" -width 10
			pack .note.cmixer.table.title.throttle -side left -expand yes -fill x


		frame .note.cmixer.table.sum
		pack .note.cmixer.table.sum -expand yes -fill x

			label .note.cmixer.table.sum.motor -text "Check" -width 10
			pack .note.cmixer.table.sum.motor -side left -expand yes -fill x

			label .note.cmixer.table.sum.pitch -text "" -textvariable cmix_TABLE(SUM,Pitch) -width 10
			pack .note.cmixer.table.sum.pitch -side left -expand yes -fill x

			label .note.cmixer.table.sum.roll -text "" -textvariable cmix_TABLE(SUM,Roll) -width 10
			pack .note.cmixer.table.sum.roll -side left -expand yes -fill x

			label .note.cmixer.table.sum.yaw -text "" -textvariable cmix_TABLE(SUM,Yaw) -width 10
			pack .note.cmixer.table.sum.yaw -side left -expand yes -fill x

			label .note.cmixer.table.sum.throttle -text "---" -width 10
			pack .note.cmixer.table.sum.throttle -side left -expand yes -fill x


		frame .note.cmixer.table.motors
		pack .note.cmixer.table.motors -expand yes -fill x

			label .note.cmixer.table.motors.label -text "Num Motors:" -width 10
			pack .note.cmixer.table.motors.label -side left -expand no -fill none

			label .note.cmixer.table.motors.num -text "0" -width 10 -textvariable cmix_TABLE(SUM,Motors)
			pack .note.cmixer.table.motors.num -side left -expand no -fill none

		frame .note.cmixer.buttons
		pack .note.cmixer.buttons -expand no -fill x -side bottom

			button .note.cmixer.buttons.load -text "Load from File" -command {
				cmix_open_mixerfile
			}
			pack .note.cmixer.buttons.load -side left -expand yes -fill x

			button .note.cmixer.buttons.bload -text "Load from Board" -command {
				if {$Serial != 0} {
					puts -nonewline $Serial "cmix\n\r"
					flush $Serial
				}
			}
			pack .note.cmixer.buttons.bload -side left -expand yes -fill x

			button .note.cmixer.buttons.mw32 -text "Save to Board" -command {
				set MAX_VAL 100
				set MAX "[cmix_get_max]"
				foreach KEY [array names cmix_TABLE] {
					set NEW_cmix_TABLE($KEY) $cmix_TABLE($KEY)
				}
				foreach MOTOR {0 1 2 3 4 5 6 7} {
					if {![catch {set X $NEW_cmix_TABLE($MOTOR,Roll); set Y $NEW_cmix_TABLE($MOTOR,Pitch); set Z $NEW_cmix_TABLE($MOTOR,Yaw); set A $NEW_cmix_TABLE($MOTOR,Throttle)}]} {
#						puts "cmix [expr $MOTOR + 1] [expr $MAX_VAL * $A / $MAX] [expr $MAX_VAL * $X / $MAX] [expr $MAX_VAL * $Y / $MAX] [expr $MAX_VAL * $Z / $MAX]"
						if {$Serial != 0} {
							serial_send $Serial "cmix [expr $MOTOR + 1] [expr $MAX_VAL * $A / $MAX] [expr $MAX_VAL * $X / $MAX] [expr $MAX_VAL * $Y / $MAX] [expr $MAX_VAL * $Z / $MAX]"
							flush $Serial
							after 100
						}
					}
				}
				if {$Serial != 0} {
					puts -nonewline $Serial "cmix\n\r"
					flush $Serial
				}
			}
			pack .note.cmixer.buttons.mw32 -side left -expand yes -fill x


		cmix_init
		set cmix_plot(lastX) 0
		set cmix_plot(lastY) 0
		trace variable cmix_TABLE w cmix_watch
		cmix_update_table
		.note.cmixer.canvas bind center <3> "cmix_allRev"
		.note.cmixer.canvas bind rotor <Any-Enter> ".note.cmixer.canvas itemconfig current -fill red"
		.note.cmixer.canvas bind rotor <Any-Leave> "cmix_update_table"
		.note.cmixer.canvas bind rotor <1> "cmix_plotDown .note.cmixer.canvas %x %y"
		.note.cmixer.canvas bind rotor <ButtonRelease-1> "cmix_plotUp .note.cmixer.canvas %x %y"
		bind .note.cmixer.canvas <B1-Motion> "cmix_plotMove .note.cmixer.canvas %x %y"
		bind .note.cmixer.canvas <3> "cmix_plotRev .note.cmixer.canvas"


	ttk::frame .note.servos
	.note add .note.servos -text "Servos"

		frame .note.servos.labels
		pack .note.servos.labels -side top -expand no -fill x

		label .note.servos.labels.min -text "Min" -width 10
		pack .note.servos.labels.min -side left -expand yes -fill x

		label .note.servos.labels.center -text "Center" -width 10
		pack .note.servos.labels.center -side left -expand yes -fill x

		label .note.servos.labels.max -text "Max" -width 10
		pack .note.servos.labels.max -side left -expand yes -fill x

		label .note.servos.labels.drate -text "DR" -width 10
		pack .note.servos.labels.drate -side left -expand yes -fill x

		label .note.servos.labels.rev -text "Reverse"
		pack .note.servos.labels.rev -side left -expand yes -fill x

	ttk::frame .note.aux
	.note add .note.aux -text "Aux"

		frame .note.aux.aux
		pack .note.aux.aux -side left -expand yes -fill both

		label .note.aux.aux.label2 -text "Position" -relief flat
		pack .note.aux.aux.label2 -side top -expand no -fill x

		label .note.aux.aux.label -text "Aux-Name" -relief flat
		pack .note.aux.aux.label -side top -expand no -fill x

		set bit_num 0
		set aux_num2 0
		foreach aux_name "ANGLE HORIZON BARO MAG CAMSTAB CAMTRIG ARM GPS_HOME GPS_HOLD PASSTHRU HEADFREE BEEPER LEDMAX LLIGHTS HEADADJ" {
			label .note.aux.aux.name_$aux_name -text "$aux_name" -relief flat
			pack .note.aux.aux.name_$aux_name -side top -expand yes -fill x
		}

		set bit_num 0
		set aux_num 0
		foreach auxname "AUX1 AUX2 AUX3 AUX4" {

			frame .note.aux.aux_$aux_num
			pack .note.aux.aux_$aux_num -side left -expand yes -fill both

			label .note.aux.aux_$aux_num.label -text "$auxname" -relief flat
			pack .note.aux.aux_$aux_num.label -side top -expand no -fill x

			frame .note.aux.aux_$aux_num.bits
			pack .note.aux.aux_$aux_num.bits -side top -expand yes -fill both

			foreach pos "min mid max" {
				frame .note.aux.aux_$aux_num.bits.bit_$bit_num
				pack .note.aux.aux_$aux_num.bits.bit_$bit_num -side left -expand yes -fill both

				label .note.aux.aux_$aux_num.bits.bit_$bit_num.label -text "$pos" -relief flat
				pack .note.aux.aux_$aux_num.bits.bit_$bit_num.label -side top -expand no -fill x

				incr bit_num
			}
			incr aux_num
		}


	ttk::frame .note.scan
	.note add .note.scan -text "I2C-Scan"

		frame .note.scan.output
		pack .note.scan.output -side top -expand yes -fill both

			label .note.scan.output.info -text "---"
			pack .note.scan.output.info -side top -expand no -fill x

		frame .note.scan.button
		pack .note.scan.button -side top -expand no -fill x

			button .note.scan.button.start -text "Scan" -command {
				global Serial
				global settings
				if {$Serial != 0} {
					serial_send $Serial "scani2cbus"
				} else {
					.info configure -text "send: error, no serial connection"
					update
				}
			}
			pack .note.scan.button.start -side top -expand yes -fill x


	ttk::frame .note.flash
	.note add .note.flash -text "Flash"

		set TEXT "
Diese funktion ist hoch experimentell !!!
bitte nur ausführen wenn Sie die Möglichkeit haben das Board manuell neu zu flashen,
dazu ist der Zugang zu dem BOOT0-Pin nötig.

Beim kleinsten fehler muss das Board per Hand geflasht werden,
der normale Weg einen reset/bootmode per CLI durchzuführen ist dann nicht mehr gegeben !

Bitte nutzen Sie nur .bin files, da es noch einen Bug im .hex loader gibt !!!

	"

		frame .note.flash.warning
		pack .note.flash.warning -side top -expand no -fill both

			label .note.flash.warning.info -text "$TEXT"
			pack .note.flash.warning.info -side top -expand no -fill x

		frame .note.flash.list
		pack .note.flash.list -side top -expand no -fill none

			set sources ""
#			lappend sources "{Baseflight/Original} {http://afrodevices.googlecode.com/svn/trunk/baseflight/obj/baseflight.hex}"
#			lappend sources "{Baseflight/r283} {http://afrodevices.googlecode.com/svn-history/r283/trunk/baseflight/obj/baseflight.hex}"
#			lappend sources "{Baseflight/Robert} {http://afrodevices.googlecode.com/svn/branches/Robert/baseflight/obj/baseflight.hex}" ## brocken
#			lappend sources "{Baseflight/Frog32} {https://raw.github.com/frog32/baseflight/master/obj/baseflight.hex}" ## ssl-only
#			lappend sources "{Baseflight/harakiri9-BFr279} {http://www.multixmedia.org/test/baseflight_harakiri.hex}"
			lappend sources "{from file} {file}"

			set source_url [lindex [lindex $sources 0] 1]
			set spin_num 0
			foreach source $sources {
				radiobutton .note.flash.list.spin_$spin_num -text "[lindex $source 0] ([lindex $source 1])" -variable source_url -relief flat -value [lindex $source 1] -anchor w
				pack .note.flash.list.spin_$spin_num -side top -expand no -fill x
				incr spin_num
			}

		frame .note.flash.space
		pack .note.flash.space -side top -expand yes -fill both

		frame .note.flash.button
		pack .note.flash.button -side top -expand no -fill both

			button .note.flash.button.flash -text "Flash" -background red -command {
				.note.flash.button.scale configure -value 0
				update
				FirmwarefileDialog . "$source_url"
			}
			pack .note.flash.button.flash -side top -expand yes -fill x

			ttk::progressbar .note.flash.button.scale
			pack .note.flash.button.scale -side top -expand no -fill x



frame .buttons
pack .buttons -side top -expand no -fill x

button .buttons.save2board -text "Save to Board" -command {
	global Serial
	global settings
	global channel
	global feature_list
	global feature_enabled
	global mixer_set
	global aux_bit
	if {$Serial != 0} {
		foreach var "[array names settings]" {
			serial_send $Serial "set $var=$settings($var)"
		}
		set channels_set ""
		foreach val "1 2 3 4 5 6 7 8" {
			foreach var "[array names channel]" {
				if {$channel($var) == $val} {
					append channels_set "$var"
				}
			}
		}
		serial_send $Serial "map $channels_set"
		serial_send $Serial "mixer $mixer_set"
		foreach var "[array names features]" {
			if {$features($var) == 1} {
				serial_send $Serial "feature $var"
			} else {
				serial_send $Serial "feature -$var"
			}
		}
		catch {
			foreach val "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14" {
				set bin ""
				foreach val2 "11 10 9 8 7 6 5 4 3 2 1 0" {
					append bin $aux_bit($val,$val2)
				}
				serial_send $Serial "aux $val [bits2int $bin]"
			}
		}
		catch {
			foreach KEY [array names servo] {
				set servo_save($KEY) $servo($KEY)
			}
			foreach servo_num "0 1 2 3 4 5 6 7" {
				if {$servo_save($servo_num,rev) == 1} {
					serial_send $Serial "servo $servo_num $servo_save($servo_num,min) $servo_save($servo_num,max) $servo_save($servo_num,center) -$servo_save($servo_num,drate)"
				} else {
					serial_send $Serial "servo $servo_num $servo_save($servo_num,min) $servo_save($servo_num,max) $servo_save($servo_num,center) $servo_save($servo_num,drate)"
				}
			}
		}
		.info configure -text "save: done"
		update
	} else {
		.info configure -text "save: error, no serial connection"
		update
	}
}
pack .buttons.save2board -side left -expand yes -fill x

button .buttons.save2file -text "Save to File" -command {
	fileDialog . save
}
pack .buttons.save2file -side left -expand yes -fill x

button .buttons.load_from_file -text "Load from File" -command {
	global Serial
	if {$Serial != 0} {
		fileDialog . open
	} else {
		.info configure -text "load: error, no serial connection"
		update
	}
}
pack .buttons.load_from_file -side left -expand yes -fill x

button .buttons.load_default -text "set Defaults" -command {
	global Serial
	if {$Serial != 0} {
		serial_send $Serial "defaults"
		after 1000
		connect_serial
	} else {
		.info configure -text "default: error, no serial connection"
		update
	}
}
pack .buttons.load_default -side left -expand yes -fill x

button .buttons.save2flash -text "Save to Flash" -command {
	global Serial
	if {$Serial != 0} {
		serial_send $Serial "save"
		after 1000
		connect_serial
	} else {
		.info configure -text "default: error, no serial connection"
		update
	}
}
pack .buttons.save2flash -side left -expand yes -fill x

button .buttons.exit -text "Reboot whithout Save" -command {
	global Serial
	if {$Serial != 0} {
		serial_send $Serial "exit"
		after 1000
		connect_serial
	} else {
		.info configure -text "default: error, no serial connection"
		update
	}
}
pack .buttons.exit -side left -expand yes -fill x

button .buttons.flashmode -text "Flashmode" -command {
	global Serial
	if {$Serial != 0} {
		serial_send $Serial "exit"
		after 2000
		puts -nonewline $Serial "R"
		flush $Serial
		after 2000
	} else {
		.info configure -text "default: error, no serial connection"
		update
	}
}
pack .buttons.flashmode -side left -expand yes -fill x

label .info -text "Not connected"
pack .info -side top -expand no -fill x

